require('dotenv').config();
const { Bot, Keyboard, InlineKeyboard, GrammyError, HttpError} = require('grammy');
const { getRandomQuestion, getCorrectAnswer } = require('./utilis');

const bot = new Bot(process.env.BOT_API_KEY);

//–†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ start –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –≤ –º–µ–Ω—é 
bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard()
        .text('HTML')
        .text('CSS')
        .row()
        .text('JavaScript')
        .text('React')
        .row()
        .text('–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
        .resized();
    await ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø - FrontInterviewPrepBotü§ñ \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å—É –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É!',
    );
    await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤ –º–µ–Ω—é üëá', {
        reply_markup: startKeyboard,
    });
});

bot.hears(['HTML', 'CSS', 'JavaScript', 'React', '–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å'], async (ctx) => {
    //–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    const topic = ctx.message.text.toLowerCase();
    //–í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é getRandomQuestion —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π
    const {question, questionTopic} = getRandomQuestion(topic);

    let inlineKeyboard;

    //–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    if (question.hasOptions) {
        const buttonRows = question.options.map((option) => [
            InlineKeyboard.text(
                option.text,
                JSON.stringify({
                    type: `${questionTopic}-option`,
                    isCorrect: option.isCorrect,
                    questionId: question.id,
                }),
            ),
        ]);
        inlineKeyboard = InlineKeyboard.from(buttonRows);
    } else {
        inlineKeyboard = new InlineKeyboard()
        .text('–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç',
        JSON.stringify({
            type: questionTopic,
            questionId: question.id,
        }),
        );
    }


    await ctx.reply(`${question.text}`, {
        reply_markup: inlineKeyboard,
    });
});

bot.on('callback_query:data',  async (ctx) => {
    //–ü–∞—Ä—Å–∏–º paylaod data
    const callbackData = JSON.parse(ctx.callbackQuery.data);

    if (!callbackData.type.includes('option')) {
        const answer = getCorrectAnswer(callbackData.type, callbackData.questionId);
        await ctx.reply(answer, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });
        await ctx.answerCallbackQuery();
        return;
    }

    if (callbackData.isCorrect) {
        await ctx.reply('–í–µ—Ä–Ω–æ!');
        await ctx.answerCallbackQuery();
        return;
    }

    const answer = getCorrectAnswer(callbackData.type.split('-')[0], callbackData.questionId);

    await ctx.reply(`–ù–µ–≤–µ—Ä–Ω–æ \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: \n${answer}`)
    await ctx.answerCallbackQuery();
});

//–í—ã–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ 
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram:", e);
    } else {
      console.error("Unknown error:", e);
    };
});
//–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
bot.start();
